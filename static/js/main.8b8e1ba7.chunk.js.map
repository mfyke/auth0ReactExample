{"version":3,"sources":["components/Main.js","components/Secret.js","components/Error.js","Auth.js","components/Callback.js","App.js","serviceWorker.js","index.js"],"names":["Main","react_default","a","createElement","this","props","name","href","onClick","auth","login","Component","Secret","logout","Error","Auth","Object","classCallCheck","auth0","WebAuth","domain","clientID","redirectUri","audience","responseType","scope","bind","authorize","parseHash","err","authResults","accessToken","idToken","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","window","location","hash","pathname","console","log","parse","getItem","removeItem","jwtDecode","Callback","handleAuthentication","username","getProfile","given_name","App","state","_this2","className","react_router_dom","react_router","path","render","isAuthenticated","Secret_Secret","components_Error","Main_Main","exact","component","default","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b8e1ba7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Main extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Sup {this.props.name} its me its ya boi asmondgold.</p>\r\n                <a href=\"/secret\">Click here for secret</a>\r\n                <hr/>\r\n                <h2>Please Login first!</h2>\r\n                <hr/>\r\n                <button onClick={this.props.auth.login}>Login</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Secret extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Sup {this.props.name} its me its your boi secretgold.</h1>\r\n                <a href=\"/\">Home</a>\r\n                <br/>\r\n                <button onClick={this.props.auth.logout}>Logout</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst Error = ()=>{\r\n    return(\r\n        <h1>404 Error this page is not found.</h1>\r\n    );\r\n}\r\n\r\nexport default Error;","import auth0 from 'auth0-js';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst LOGIN_SUCCESS = \"/secret\";\r\nconst LOGIN_FAILURE = \"/\"\r\n\r\nexport default class Auth {\r\n    auth0 = new auth0.WebAuth({\r\n        domain: \"dev-liwu6bl3.auth0.com\",\r\n        clientID: \"Zx337it6952CiporJWaG06qCLx7hJeym\",\r\n        redirectUri: \"http://localhost:3000/callback\",\r\n        audience: \"https://dev-liwu6bl3.auth0.com/userinfo\",\r\n        responseType: \"token id_token\",\r\n        scope: \"openid profile\"\r\n    });\r\n\r\n    constructor() {\r\n        this.login = this.login.bind(this);\r\n    }\r\n\r\n    login() {\r\n        this.auth0.authorize();\r\n    }\r\n\r\n    handleAuthentication() {\r\n        this.auth0.parseHash((err,authResults)=>{\r\n            if(authResults && authResults.accessToken && authResults.idToken) {\r\n                let expiresAt = JSON.stringify((authResults.expiresIn) * 100 + new Date().getTime());\r\n                localStorage.setItem(\"access_token\", authResults.accessToken);\r\n                localStorage.setItem(\"id_token\", authResults.idToken);\r\n                localStorage.setItem(\"expires_at\", expiresAt);\r\n                window.location.hash = \"\";\r\n                window.location.pathname = LOGIN_SUCCESS;\r\n\r\n            } else if (err) {\r\n                window.location.pathname = LOGIN_FAILURE\r\n                console.log(err);\r\n            }\r\n        })\r\n    }\r\n\r\n    isAuthenticated() {\r\n        let expiresAt = JSON.parse(localStorage.getItem(\"expires_at\"));\r\n        return new Date().getTime() < expiresAt;\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(\"access_token\");\r\n        localStorage.removeItem(\"id_token\");\r\n        localStorage.removeItem(\"expires_at\");\r\n        window.location.pathname = LOGIN_FAILURE;\r\n    }\r\n\r\n    getProfile() {\r\n        if(localStorage.getItem(\"id_token\")) {\r\n            return jwtDecode(localStorage.getItem(\"id_token\"));\r\n        } else {\r\n            return {};\r\n        }\r\n\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Auth from '../Auth';\r\n\r\nexport default class Callback extends Component {\r\n    componentDidMount() {\r\n        const auth = new Auth();\r\n        auth.handleAuthentication();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Loading...</h1>\r\n            </div>\r\n        );\r\n    }\r\n}   ","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport Secret from './components/Secret';\nimport Error from './components/Error';\nimport Callback from './components/Callback';\nimport Auth from './Auth';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\nconst auth = new Auth();\nlet username = auth.getProfile().given_name || \"User\";\n\nclass App extends Component {\n\n  state = {\n    auth: auth,\n    name: username\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Switch>\n            <Route path=\"/secret\" render={()=> this.state.auth.isAuthenticated() ? <Secret auth={this.state.auth} name={this.state.name} /> : <Error/>} />\n            <Route path=\"/\" render={() => <Main auth={this.state.auth} name={this.state.name} />} exact />\n            <Route path=\"/callback\" component={Callback} />\n            <Route component={Error} default />  \n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}